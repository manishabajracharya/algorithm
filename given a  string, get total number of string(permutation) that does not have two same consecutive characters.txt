	John and Brus are studying string theory at the university. According to Brus, a string is called lucky if no two consecutive characters are equal. John is analyzing a String s, and he wants to know how many distinct lucky strings can be generated by reordering the letters in s. If s is a lucky string in its original ordering, it should also be considered in the count.
 
Definition
    	
Class:	TheLuckyString
Method:	count
Parameters:	String
Returns:	int
Method signature:	int count(String s)
(be sure your method is public)
    
 
Constraints
-	s will contain between 1 and 10 characters, inclusive.
-	Each character of s will be a lowercase letter ('a' - 'z').
 
Examples
0)	
    	
"ab"
Returns: 2
Two lucky strings - "ab" and "ba".
1)	
    	
"aaab"
Returns: 0
It's impossible to construct a lucky string.
2)	
    	
"aabbbaa"
Returns: 1
"abababa" is the only lucky string that can be generated.
3)	
    	
"abcdefghij"
Returns: 3628800






import java.util.*;


/**
 *
 * @author Manisha
 */
public class Interview_Practice 
{
static int c=0;
public static int count(String s)
{
generatePerm(s.toCharArray(), 0, s.length()-1);

return c;

}

public static void generatePerm(char[] arr, int start, int end)
{
if(start==end)
{
int i=0;
for(i=0;i<arr.length-1;i++)
{
if(arr[i]==arr[i+1])
{
break;
}

}
if(i == arr.length-1)
{
c++;
}
//hm.put(String.valueOf(arr),1);
}
else
{
for(int i=start;i<arr.length;i++)
{
char temp = arr[start];
arr[start] = arr[i];
arr[i] = temp;
generatePerm(arr,start+1, end);
temp = arr[start];
arr[start] = arr[i];
arr[i] = temp;

}


}

}


public static void main(String[] args)
{
    String st = "abcdefghij";
       System.out.println(count(st));
   
}

}
 
//output: 3628800