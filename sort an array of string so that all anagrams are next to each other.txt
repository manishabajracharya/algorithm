 
 
Write a method to sort an array of strings so that all the anagrams are next to each other.
 
 solved on 11/16/2014
 
 
 public class Interview_Practice 
{
public static void sortanagrams(String[] arr)
{

HashMap<String, ArrayList<String>> hm = new HashMap<>();

for(int i=0;i<arr.length;i++)
{
String val = arr[i];
char[] ch = arr[i].toCharArray();
Arrays.sort(ch);
arr[i] = String.valueOf(ch);
//System.out.println("arr[i]="+arr[i]);
ArrayList<String> temp = new ArrayList<>();
if(hm.containsKey(arr[i]))
{
temp.addAll((ArrayList)hm.get(arr[i]));
}

temp.add(val);

hm.put(arr[i],temp);

}

ArrayList<String> sortedanagram = new ArrayList<>();

Iterator it = hm.entrySet().iterator();
while(it.hasNext())
{
HashMap.Entry pairs = (HashMap.Entry)it.next();
sortedanagram.addAll((ArrayList)(pairs.getValue()));

}

System.out.println(sortedanagram);


}
public static void main(String[] args){
    String[] st={"cat","bug", "act","dog","tac","gub","cat","god"}; 
    sortanagrams(st);
    
}
}
 
 //output: [bug, gub, cat, act, tac, dog, god]
 
 
 ----------------------------------------------------------------------------- 
 solved on 9/7/2014
 
 public static void anagram(String[] arr)
{
HashMap<String, String> hm = new HashMap<String,String>();

for(int i=0;i<arr.length;i++)
{
    char[] ch = arr[i].toCharArray();
Arrays.sort(ch);
String temp = new String(ch);
if(hm.containsKey(temp))
{
hm.put(temp, hm.get(temp)+","+arr[i]);
}
else
{
hm.put(temp,arr[i]);
}

}


Iterator it = hm.entrySet().iterator();
while(it.hasNext())
{
HashMap.Entry pairs = (HashMap.Entry)it.next();
System.out.println(pairs.getValue());                                                                                                                                  
}
}
 
public static void main(String[] args)
{
    String[] arr = {"cat","dog","tac","god","odg","act","hat"};
    anagram(arr);

}